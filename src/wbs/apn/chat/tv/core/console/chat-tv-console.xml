<console-module
	name="chat-tv">

	<!--

	@Inject ChatTvConsoleHelper chatTvHelper;
	@Inject ChatTvDao chatTvDao;
	@Inject ChatTvSchemeConsoleHelper chatTvSchemeHelper;
	@Inject ConsoleRequestContext requestContext;
	@Inject ConsoleManager contextManager;
	@Inject GenericConsoleModule genericConsoleModule;
	@Inject PrivChecker privChecker;

	@Inject Provider<BabyObjectContext> babyObjectContext;
	@Inject Provider<ConsoleFile> consoleFile;
	@Inject Provider<ContextType> contextType;
	@Inject Provider<ObjectContext> objectContext;
	@Inject Provider<TabContextResponder> tabContextResponder;

	@Inject Provider<FormFieldsBuilder> fieldsBuilder;
	@Inject Provider<IntFormField> intField;
	@Inject Provider<SecondsFormField> secondsField;
	@Inject Provider<TextFormField> textField;
	@Inject Provider<YesNoFormField> yesNoField;

	@Inject @Named
	ObjectLookup<ChatTvSchemeRec> chatTvSchemeLookup;

	@Inject @Named
	Provider<PagePart> chatTvSchemeDetailsPartFactory;

	@Inject @Named
	StringLookup chatTvSchemeTitleLookup;

	protected String getThreadName () {
		return "ChatTv";
	}

	// ========================================================= console module

	@Override
	public List<ContextType> getContextTypes () {

		return ImmutableList.<ContextType>of (

			contextType.get ()
				.name ("chat_tv")
				.defaultFileName ("chatUser_tv_post"),

			contextType.get ()
				.name ("chatTvSchemes")
				.defaultFileName ("chatTvScheme_list"),

			contextType.get ()
				.name ("chatTvScheme+")
				.defaultFileName ("chatTvScheme_details"),

			contextType.get ()
				.name ("chatTvScheme")
				.defaultFileName ("chatTvScheme_details"));

	}

	@Override
	public List<Context> getContexts () {

		return ImmutableList.<Context>of (

			babyObjectContext.get ()
				.name ("chat_tv")
				.typeName ("chat_tv")
				.title ("TV")
				.parentContextName ("chat")
				.parentContextTabName ("chat_tv"),

			babyObjectContext.get ()
				.name ("chatTvSchemes")
				.typeName ("chatTvSchemes")
				.title ("Schemes")
				.parentContextName ("chat_tv")
				.parentContextTabName ("chat_tv_schemes"),

			objectContext.get ()
				.name ("chatTvScheme")
				.typeName ("chatTvScheme+")
				.titleLookup (chatTvSchemeTitleLookup)
				.requestIdKey ("chatSchemeId")
				.objectLookup (chatTvSchemeLookup)
				.postProcessorName ("chatTvScheme")
				.parentContextName ("chat_tv")
				.parentContextTabName ("chat_tv_schemes"),

			// chat

			babyObjectContext.get ()
				.name ("chat/chat_tv")
				.typeName ("chat_tv")
				.title ("TV")
				.parentContextName ("chat/chat")
				.parentContextTabName ("chat_tv"),

			babyObjectContext.get ()
				.name ("chat/chatTvSchemes")
				.typeName ("chatTvSchemes")
				.title ("Schemes")
				.parentContextName ("chat/chat_tv")
				.parentContextTabName ("chat_tv_schemes"),

			objectContext.get ()
				.name ("chat/chatTvScheme")
				.typeName ("chatTvScheme+")
				.titleLookup (chatTvSchemeTitleLookup)
				.requestIdKey ("chatSchemeId")
				.objectLookup (chatTvSchemeLookup)
				.postProcessorName ("chatTvScheme")
				.parentContextName ("chat/chat_tv")
				.parentContextTabName ("chat_tv_schemes"));

	}

	@Override
	public List<ContextTab> getContextTabs () {

		return ImmutableList.<ContextTab>of (

			// ========== chat

			tab (
				"chat_tv",
				"TV",
				"/chat_tv/{chatId}/chat_tv_post",
				"chat_tvToScreen"),

			// ========== chat tv

			tab (
				"chat_tv_post",
				"Post",
				"chat_tv_post",
				"chat_tvToScreen"),

			tab (
				"chat_tv_settings",
				"Settings",
				"chat_tv_settings",
				"chat_manage"),

			tab (
				"chat_tv_schemes",
				"Schemes",
				"/chatTvSchemes/{chatId}/chatTvScheme_list",
				"chat_manage"),

			// chat tv scheme

			tab (
				"chatTvScheme_list",
				"List",
				"chatTvScheme_list",
				"chat_manage"),

			tab (
				"chatTvScheme_details",
				"Details",
				"chatTvScheme_details",
				"chat_manage"));

	}

	@Override
	public Map<String,List<Pair<String,String>>>
	getContextTabsByContextType () {

		return ImmutableMap.<String,List<Pair<String,String>>>builder ()

			.put ("chat+",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("plugins", "chat_tv")))

			.put ("chat",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("plugins", "chat_tv")))

			.put ("chat_tv",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("end", "chat_tv_post"),
					Pair.of ("end", "chat_tv_settings"),
					Pair.of ("end", "chat_tv_schemes")))

			.put ("chatTvSchemes",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("end", "chatTvScheme_list")))

			.put ("chatTvScheme+",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("end", "chatTvScheme_list"),
					Pair.of ("end", "chatTvScheme_details")))

			.build ();

	}

	@Override
	public Map<String,WebFile> getContextFiles () {

		return ImmutableMap.<String,WebFile>builder ()

			.put ("chat_tv_post",
				consoleFile.get ()
					.getResponderName ("chatTvPostResponder")
					.postActionName ("chatTvPostAction")
					.privName ("chat_tvToScreen"))

			.put ("chat_tv_settings",
				consoleFile.get ()
					.getResponder (settingsResponder)
					.postAction (settingsAction)
					.privName ("chat_manage"))

			.put ("chatTvScheme_list",
				consoleFile.get ()
					.getResponderName ("chatTvSchemeListResponder")
					.privName ("chat_manage"))

			.put ("chatTvScheme_details",
				consoleFile.get ()
					.getResponderName ("chatTvSchemeDetailsResponder")
					.postActionName ("chatTvSchemeDetailsAction")
					.privName ("chat_manage"))

			.build ();
	}

	@Override
	public Map<String,List<String>>
	getContextFilesByContextType () {

		return ImmutableMap.<String,List<String>>builder ()

			.put ("chat_tv",
				ImmutableList.<String>of (
					"chat_tv_post",
					"chat_tv_settings"))

			.put ("chatTvSchemes",
				ImmutableList.<String>of (
					"chatTvScheme_list"))

			.put ("chatTvScheme+",
				ImmutableList.<String>of (
					"chatTvScheme_list",
					"chatTvScheme_details"))

			.build ();
	}

	// ================================================================= fields

	List<FormField> chatTvFields;
	List<FormField> chatTvSchemeFields;

	@Override
	protected void initFields () {

		chatTvFields = fieldsBuilder.get ()
			.consoleHelper (chatTvHelper)
			.fields (

				secondsField.get ()
					.name ("toScreenTimeout")
					.label ("To-screen timeout during sign-up"),

				yesNoField.get ()
					.name ("toScreenMedia")
					.label ("To-screen messages with image"),

				intField.get ()
					.name ("toScreenTextDailyMax")
					.label ("To-screen text daily max"),

				intField.get ()
					.name ("toScreenPhotoDailyMax")
					.label ("To-screen photo daily max"),

				secondsField.get ()
					.name ("carouselDelay")
					.label ("Carousel update frequency"),

				secondsField.get ()
					.name ("carouselOldest"),

				intField.get ()
					.name ("carouselMinimum"),

				intField.get ()
					.name ("carouselMaximum"),

				intField.get ()
					.name ("carouselPercent")
					.label ("Carousel no-repeat percentage"),

				textField.get ()
					.name ("apiUrl")
					.label ("API URL"),

				textField.get ()
					.name ("imageUrl")
					.label ("Image URL"),

				textField.get ()
					.name ("channelId")
					.label ("Channel ID"))

			.build ();

		chatTvSchemeFields = fieldsBuilder.get ()
			.consoleHelper (chatTvSchemeHelper)
			.fields (

				intField.get ()
					.name ("toScreenTextCharge")
					.label ("To-screen text charge"),

				intField.get ()
					.name ("toScreenPhotoCharge")
					.label ("To-screen photo charge"))

		.build ();

	}

	// ========================================================= object lookups

	ObjectLookup<ChatTvRec> chatTvLookup;

	@Override
	protected void initLookups () {

		chatTvLookup =
			new ObjectLookup<ChatTvRec> () {

			@Override
			public ChatTvRec lookupObject (
					ContextStuff stuff) {

				return chatTvDao.findChatTvById (
					(Integer) stuff.get("chatId"));

			}

		};

	}

	// ======================================================== post processors

	@PostProcessorFor ("chat")
	public void postProcessChat (
			ContextStuff contextStuff) {

		Integer chatId = (Integer) contextStuff.get ("chatId");

		if (chatId == null)
			return;

		ChatTvRec chatTv =
			chatTvDao.findChatTvById (chatId);

		if (chatTv == null)
			return;

		ChatRec chat = chatTv.getChat ();

		if (privChecker.can (chat, "tv_to_screen"))
			contextStuff.grant ("chat_tvToScreen");

	}

	@PostProcessorFor ("chatTvScheme")
	public void postProcessChatTvScheme (
			ContextStuff contextStuff) {

		ChatTvSchemeRec chatTvScheme =
			chatTvDao.findChatTvSchemeById (
				(Integer) contextStuff.get ("chatSchemeId"));

		contextStuff.set (
			"chatId",
			chatTvScheme.getChatScheme ().getChat ().getId ());

		contextManager.runPostProcessors (
			"chat",
			contextStuff);

	}

	// ========================================================= part factories

	Provider<PagePart> settingsPartFactory;

	@Override
	protected void initPartFactories () {

		settingsPartFactory =
			genericConsoleModule.makeDetailsPartFactory (
				chatTvLookup,
				"chat_manage",
				"/chat_tv_settings",
				chatTvFields);
	}

	// ============================================================= responders

	Provider<Responder>
		settingsResponder;

	@Override
	protected void initResponders () {

		settingsResponder =
			tabContextResponder.get ()
				.tab ("chat_tv_settings")
				.title ("Chat settings for TV")
				.pagePartFactory (settingsPartFactory);

	}

	@Override
	public Map<String,Provider<Responder>> getResponders () {

		return ImmutableMap.<String,Provider<Responder>>builder ()

			.put ("chatTvPostResponder",
				tabContextResponder.get ()
					.tab ("chat_tv_post")
					.title ("Chat TV post to screen")
					.pagePartName ("chatTvPostPart"))

			.put ("chatTvSchemeListResponder",
				tabContextResponder.get ()
					.tab ("chatTvScheme_list")
					.title ("Chat TV schemes")
					.pagePartName ("chatTvSchemeListPart"))

			.put ("chatTvSchemeDetailsResponder",
				tabContextResponder.get ()
					.tab ("chatTvScheme_details")
					.title ("Chat TV scheme details")
					.pagePartFactory (chatTvSchemeDetailsPartFactory))

			.build ();

	}

	// ================================================================ actions

	Action
		settingsAction;

	@Override
	protected void initActions () {

		settingsAction =
			genericConsoleModule.makeDetailsAction (
				settingsResponder,
				settingsResponder,
				"chat_manage",
				chatTvLookup,
				chatTvFields);

	}

	-->

</console-module>