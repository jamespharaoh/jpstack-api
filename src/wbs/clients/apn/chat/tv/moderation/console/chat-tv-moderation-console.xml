<console-module
	name="chat-tv-moderation">

	<!--

	@Inject ChatTvDao chatTvDao;
	@Inject ConsoleManager contextManager;

	@Inject Provider<ConsoleFile> consoleFile;
	@Inject Provider<ContextType> contextType;
	@Inject Provider<ObjectContext> objectContext;
	@Inject Provider<TabContextResponder> tabContextResponder;

	// ========================================================= console module

	@Override
	public List<ContextType> getContextTypes () {

		return ImmutableList.<ContextType>of (

			contextType.get ()
				.name ("chatTvModeration")
				.defaultFileName ("chatTvModeration.form"));

	}

	@Override
	public List<Context> getContexts () {

		return ImmutableList.<Context>of (

			objectContext.get ()
				.name ("chatTvModeration")
				.typeName ("chatTvModeration")
				.title ("Chat TV moderation")
				.requestIdKey ("chatTvModerationId")
				.objectLookup (chatTvModerationLookup)
				.postProcessorName ("chatTvModeration"));

	}

	@Override
	public List<ContextTab> getContextTabs () {

		return ImmutableList.<ContextTab>of (

			// ========== chat tv moderation

			tab (
				"chatTvModeration.summary",
				"Summary",
				"chatTvModeration.summary",
				"chat.tvToScreen"));
	}

	@Override
	public Map<String,List<Pair<String,String>>>
	getContextTabsByContextType () {

		return ImmutableMap.<String,List<Pair<String,String>>>builder ()

			.put ("chatTvModeration",
				ImmutableList.<Pair<String,String>>of (
					Pair.of ("end", "chatTvModeration.summary")))

			.build ();
	}

	@Override
	public Map<String,WebFile> getContextFiles () {

		return ImmutableMap.<String,WebFile>builder ()

			.put ("chatTvModeration.form",
				consoleFile.get ()
					.getResponderName ("chatTvModerationFormResponder")
					.postActionName ("chatTvModerationFormAction")
					.privName ("chat.tvToScreen"))

			.put ("chatTvModeration.summary",
				consoleFile.get ()
					.getResponderName ("chatTvModerationSummaryResponder")
					.privName ("chat.tvToScreen"))

			.put ("chatTvModeration.reply",
				consoleFile.get ()
					.getResponderName ("chatTvModerationReplyResponder")
					.postActionName ("chatTvModerationReplyAction")
					.privName ("chat.tvToScreen"))

			.build ();

	}

	@Override
	public Map<String,List<String>>
	getContextFilesByContextType () {

		return ImmutableMap.<String,List<String>>builder ()

			.put ("chat.tv",
				ImmutableList.<String>of (
					"chatTvModeration.reply"))

			.put ("chatTvModeration",
				ImmutableList.<String>of (
					"chatTvModeration.form",
					"chatTvModeration.reply",
					"chatTvModeration.summary"))

			.build ();
	}

	@Override
	public Map<String,Provider<Responder>> getResponders () {

		return ImmutableMap.<String,Provider<Responder>>builder ()

			.put ("chatTvModerationFormResponder",
				beanResponder ("chatTvModerationFormPage"))

			.put ("chatTvModerationReplyResponder",
				beanResponder ("chatTvModerationReplyPage"))

			.put ("chatTvModerationSummaryResponder",
				tabContextResponder.get ()
					.tab ("chatTvModeration.summary")
					.title ("Chat TV moderation summary")
					.pagePartName ("chatTvModerationSummaryPart"))

			.build ();
	}

	// ========================================================= object lookups

	ObjectLookup<ChatTvModerationRec> chatTvModerationLookup =
		new ObjectLookup<ChatTvModerationRec> () {

		@Override
		public ChatTvModerationRec lookupObject (
				ContextStuff stuff) {

			return chatTvDao.findModerationById (
				(Integer) stuff.get("chatTvModerationId"));

		}

	};

	@PostProcessorFor ("chatTvModeration")
	public void postProcessChatTvModeration (
			ContextStuff contextStuff) {

		ChatTvModerationRec moderation =
			chatTvDao.findModerationById (
				(Integer) contextStuff.get ("chatTvModerationId"));

		ChatTvRec chatTv = moderation.getMessage ().getChatTv ();

		contextStuff.set (
			"chatId",
			chatTv.getId ());

		contextManager.runPostProcessors (
			"chat",
			contextStuff);
	}

	-->

</console-module>