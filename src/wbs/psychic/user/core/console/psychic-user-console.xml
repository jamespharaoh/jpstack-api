<console-module
	name="psychic-user">

	<console-helper-provider
		object-name="psychicUser">

		<context-stuff
			name="psychicUserName"
			field="id"/>

		<context-stuff
			name="psychicId"
			delegate="psychic"
			field="id"/>

		<run-post-processor
			name="psychic"/>

	</console-helper-provider>

	<object-context
		name="psychicUser"
		object-name="psychicUser">

		<list>

		</list>

		<object>

		</object>

	</object-context>

</console-module>

<!--
package wbs.psychic.user.core.console;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Provider;

import wbs.framework.application.annotations.SingletonComponent;
import wbs.platform.console.context.ContextBuilder;
import wbs.platform.console.context.ContextStuff;
import wbs.platform.console.forms.CodeFormField;
import wbs.platform.console.forms.DateFormField;
import wbs.platform.console.forms.EnumFormField;
import wbs.platform.console.forms.FormField;
import wbs.platform.console.forms.FormFieldsBuilder;
import wbs.platform.console.forms.IdFormField;
import wbs.platform.console.forms.IntFormField;
import wbs.platform.console.forms.ObjectFormField;
import wbs.platform.console.forms.TextFormField;
import wbs.platform.console.forms.TimestampFormField;
import wbs.platform.console.forms.YesNoFormField;
import wbs.platform.console.module.AbstractConsoleModule;
import wbs.platform.console.module.ConsoleManager;
import wbs.platform.event.console.EventsPageBuilder;
import wbs.platform.object.create.CreatePageBuilder;
import wbs.platform.object.search.SearchPageBuilder;
import wbs.platform.object.settings.SettingsPageBuilder;
import wbs.platform.object.summary.SummaryPageBuilder;
import wbs.psychic.bill.console.PsychicUserAccountConsoleHelper;
import wbs.psychic.core.model.PsychicRec;
import wbs.psychic.user.core.model.PsychicUserDao;
import wbs.psychic.user.core.model.PsychicUserRec;
import wbs.psychic.user.core.model.PsychicUserSearch;

@SingletonComponent ("psychicUserConsoleModule")
public class PsychicUserConsoleModule
	extends AbstractConsoleModule {

	@Inject ConsoleManager contextManager;
	@Inject PsychicBillModeHelper psychicBillModeHelper;
	@Inject PsychicUserDao psychicUserDao;
	@Inject PsychicUserConsoleHelper psychicUserHelper;
	@Inject PsychicUserAccountConsoleHelper psychicUserAccountHelper;

	@Inject Provider<ContextBuilder> contextBuilder;
	@Inject Provider<SearchPageBuilder> searchPageBuilder;
	@Inject Provider<CreatePageBuilder> createPageBuilder;
	@Inject Provider<EventsPageBuilder> eventsPageBuilder;
	@Inject Provider<SummaryPageBuilder> summaryPageBuilder;
	@Inject Provider<SettingsPageBuilder> settingsPageBuilder;

	@Inject Provider<CodeFormField> codeField;
	@Inject Provider<DateFormField> dateField;
	@Inject Provider<EnumFormField> enumField;
	@Inject Provider<FormFieldsBuilder> fieldsBuilder;
	@Inject Provider<IdFormField> idField;
	@Inject Provider<IntFormField> intField;
	@Inject Provider<ObjectFormField> objectField;
	@Inject Provider<TextFormField> textField;
	@Inject Provider<TimestampFormField> timestampField;
	@Inject Provider<YesNoFormField> yesNoField;

	@Override
	public void init () {

		contextBuilder.get ()
			.consoleModule (this)
			.consoleHelper (psychicUserHelper)
			.addParentLink ("psychic")
			.tabLocation ("users")
			.privName ("psychic.userAdmin")
			.build ();

		// search page

		searchPageBuilder.get ()
			.consoleModule (this)
			.consoleHelper (psychicUserHelper)
			.searchClass (PsychicUserSearch.class)
			.sessionKey ("psychicUserSearch")
			.searchFields (searchFields ())
			.resultsFields (resultsFields ())
			.privName ("psychic.userView")
			.build ();

		// summary page

		summaryPageBuilder.get ()
			.consoleModule (this)
			.consoleHelper (psychicUserHelper)
			.privName ("psychic.userView")
			.addFields (summaryFields ())
			.addHeading ("Account")
			.addFields (accountFields ())
			.build ();

		// admin

		addContextTabLocation (
			"end",
			"admin",
			"psychicUser+",
			"psychicUser");

		// help

		addContextTabLocation (
			"end",
			"help",
			"psychicUser+",
			"psychicUser");

		// events page

		eventsPageBuilder.get ()
			.consoleModule (this)
			.consoleHelper (psychicUserHelper)
			.privName ("psychic.userAdmin")
			.build ();

	}

	@PostProcessorFor ("psychicUser")
	public void postProcessPsychicUser (
			ContextStuff contextStuff) {

		PsychicUserRec psychicUser =
			psychicUserDao.findPsychicUserById (
				(Integer) contextStuff.get ("psychicUserId"));

		contextStuff.set (
			"psychicUserName",
			psychicUser.getCode ());

		PsychicRec psychic =
			psychicUser.getPsychic ();

		contextStuff.set (
			"psychicId",
			psychic.getId ());

		contextManager.runPostProcessors (
			"psychic",
			contextStuff);

	}

	List<FormField> searchFields () {

		return fieldsBuilder.get ()
			.fields (

				intField.get ()
					.name ("id")
					.nullable (true),

				textField.get ()
					.name ("code")
					.nullable (true),

				textField.get ()
					.name ("number")
					.nullable (true))

			.build ();

	}

	List<FormField> resultsFields () {

		return fieldsBuilder.get ()
			.consoleHelper (psychicUserHelper)
			.fields (

				codeField.get (),

				objectField.get ()
					.name ("number"))

			.build ();

	}

	List<FormField> summaryFields () {

		return fieldsBuilder.get ()
			.consoleHelper (psychicUserHelper)
			.fields (

				idField.get (),
				codeField.get (),

				objectField.get ()
					.name ("psychicAffiliate")
					.label ("Affiliate")
					.rootFieldName ("psychic"),

				timestampField.get ()
					.name ("createTime")
					.label ("Creation time"),

				timestampField.get ()
					.name ("firstJoinTime"),

				timestampField.get ()
					.name ("lastJoinTime"),

				yesNoField.get ()
					.name ("stopped"),

				yesNoField.get ()
					.name ("chargesConfirmed"))

			.build ();

	}

	List<FormField> accountFields () {

		return fieldsBuilder.get ()
			.consoleHelper (psychicUserAccountHelper)
			.fields (

				enumField.get ()
					.name ("billMode")
					.enumHelper (psychicBillModeHelper),

				intField.get ()
					.name ("requestCount"),

				intField.get ()
					.name ("requestSpend"),

				intField.get ()
					.name ("creditFree"),

				intField.get ()
					.name ("creditPending"),

				intField.get ()
					.name ("creditSuccess"),

				intField.get ()
					.name ("creditFailure"),

				intField.get ()
					.name ("creditAdminPaid"),

				intField.get ()
					.name ("creditAdminFree"),

				dateField.get ()
					.label ("Daily date"),

				intField.get ()
					.name ("dailyAmount"))

			.build ();

	}

}
-->