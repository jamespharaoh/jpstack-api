#!/usr/bin/env ruby

require "shellwords"
require "tempfile"
require "xml"

ENV["XMLLINT_INDENT"] = "\t"

global_doc = XML::Document.file "etc/global.xml"
global_elem = global_doc.root

def create_xml \
		project_name,
		package_name,
		template_name,
		target,
		vars = {}

	template_path =
		"etc/#{template_name}.xquery"

	project_path =
		"%s/src/%s/%s-project.xml" % [
			project_name,
			package_name.gsub(".", "/"),
			project_name,
		]

	target_path =
		"%s/%s" % [
			project_name,
			target,
		]

	if File.exist? target_path

		template_mtime =
			File.mtime template_path

		project_mtime =
			File.mtime project_path

		target_mtime =
			File.mtime target_path

		# TODO make this more clever

		max_mtime = [
			template_mtime,
			project_mtime,
		].max

		return \
			if target_mtime > max_mtime

	end

	puts target_path

	temp =
		Tempfile.new "wbs-rebuild-"

	xqilla_args = [
		"xqilla",
		template_path,
		"-i", project_path,
		"-o", temp.path,
	] + vars.map {
		|key, value|
		[ "-v", key, value ]
	}.flatten

	xqilla_cmd =
		Shellwords.join xqilla_args

	system xqilla_cmd \
		or raise "Error #{xqilla_cmd}"

	FileUtils.mkdir_p \
		File.dirname(target_path)

	xmllint_args = [
		"xmllint",
		"--format",
		temp.path,
		"--output",
		target_path,
	]

	xmllint_cmd =
		Shellwords.join xmllint_args

	system xmllint_cmd \
		or raise "Error #{xmllint_cmd}"


end

File.open "etc/libraries.xml", "w" do
	|file|

	file.write "<libraries>\n"

	Dir.entries("binaries/libraries").sort.each do
		|library|

		next unless library =~ /^(.*)-(jar|bundle)-(.*).jar$/

		library_name = $1
		library_type = $2
		library_version = $3

		file.write "\t<library"

		file.write " name=\"%s\"" % [
			library_name,
		]

		file.write " type=\"%s\"" % [
			library_type,
		]

		file.write " version=\"%s\"" % [
			library_version,
		]

		source_path =
			"binaries/libraries/%s-source-%s.jar" % [
				library_name,
				library_version,
			]

		if File.exist? source_path
			file.write " source=\"yes\""
		end

		file.write "/>\n"

	end

	file.write "</libraries>\n"

end

global_elem.find("projects/project").each do
	|project_elem|

	project_name = project_elem["name"]
	package_name = project_elem["package"]

	create_xml \
		project_name,
		package_name,
		"build-xml",
		"build.xml"

	create_xml \
		project_name,
		package_name,
		"classpath",
		".classpath"

	create_xml \
		project_name,
		package_name,
		"factorypath",
		".factorypath"

	create_xml \
		project_name,
		package_name,
		"project",
		".project"

	create_xml \
		project_name,
		package_name,
		"console-web-xml",
		"console/web-live.xml",
		"mode" => "live"

	create_xml \
		project_name,
		package_name,
		"console-web-xml",
		"console/web-test.xml",
		"mode" => "test"

	create_xml \
		project_name,
		package_name,
		"api-web-xml",
		"api/web-live.xml",
		"mode" => "live"

	create_xml \
		project_name,
		package_name,
		"api-web-xml",
		"api/web-test.xml",
		"mode" => "test"

	create_xml \
		project_name,
		package_name,
		"server-xml",
		"console/server-test.xml",
		"mode" => "test"

	[
		"test",
	].each do
		|dir|

		FileUtils.mkdir_p "#{project_name}/#{dir}"

	end

end
